// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Scheduling.API.Data;

#nullable disable

namespace Scheduling.API.Data.Migrations
{
    [DbContext(typeof(SchedulingDbContext))]
    partial class SchedulingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Scheduling.API.Models.AdHocMeal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MealId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ScheduleCollectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TimeSlot")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MealId");

                    b.HasIndex("ScheduleCollectionId", "Date");

                    b.ToTable("AdHocMeals", (string)null);
                });

            modelBuilder.Entity("Scheduling.API.Models.Materialized.MonthlyScheduleInstance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AppliedTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("GeneratedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<Guid>("ScheduleCollectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppliedTemplateId");

                    b.HasIndex("ScheduleCollectionId", "Year", "Month")
                        .IsUnique();

                    b.ToTable("MonthlyScheduleInstances", (string)null);
                });

            modelBuilder.Entity("Scheduling.API.Models.Materialized.MonthlyScheduleItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MealId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MonthlyScheduleInstanceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("SourceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TimeSlot")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MealId");

                    b.HasIndex("Date", "TimeSlot");

                    b.HasIndex("MonthlyScheduleInstanceId", "Date");

                    b.HasIndex("Source", "SourceId");

                    b.ToTable("MonthlyScheduleItems", (string)null);
                });

            modelBuilder.Entity("Scheduling.API.Models.Meal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Meals", (string)null);
                });

            modelBuilder.Entity("Scheduling.API.Models.RecurringMealRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("DayOfMonth")
                        .HasColumnType("int");

                    b.Property<int?>("DaysOfWeek")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Interval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<Guid>("MealId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ScheduleCollectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TimeSlot")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MealId");

                    b.HasIndex("ScheduleCollectionId");

                    b.ToTable("RecurringMealRules", (string)null);
                });

            modelBuilder.Entity("Scheduling.API.Models.ScheduleCollection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AutoRepeatMonthly")
                        .HasColumnType("bit");

                    b.Property<Guid?>("BaseTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StartMonth")
                        .HasColumnType("int");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("BaseTemplateId");

                    b.HasIndex("UserId", "StartYear", "StartMonth");

                    b.ToTable("ScheduleCollections", (string)null);
                });

            modelBuilder.Entity("Scheduling.API.Models.ScheduleOverride", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ReplacementMealId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ScheduleCollectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TargetRuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TimeSlot")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ReplacementMealId");

                    b.HasIndex("TargetRuleId");

                    b.HasIndex("ScheduleCollectionId", "Date", "TimeSlot");

                    b.ToTable("ScheduleOverrides", (string)null);
                });

            modelBuilder.Entity("Scheduling.API.Models.ScheduleTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("ScheduleTemplates", (string)null);
                });

            modelBuilder.Entity("Scheduling.API.Models.ScheduleTemplateDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<Guid>("MealId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TimeSlot")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MealId");

                    b.HasIndex("TemplateId");

                    b.ToTable("ScheduleTemplateDetails", (string)null);
                });

            modelBuilder.Entity("Scheduling.API.Models.AdHocMeal", b =>
                {
                    b.HasOne("Scheduling.API.Models.Meal", "Meal")
                        .WithMany()
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Scheduling.API.Models.ScheduleCollection", "ScheduleCollection")
                        .WithMany("AdHocMeals")
                        .HasForeignKey("ScheduleCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");

                    b.Navigation("ScheduleCollection");
                });

            modelBuilder.Entity("Scheduling.API.Models.Materialized.MonthlyScheduleInstance", b =>
                {
                    b.HasOne("Scheduling.API.Models.ScheduleTemplate", "AppliedTemplate")
                        .WithMany()
                        .HasForeignKey("AppliedTemplateId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Scheduling.API.Models.ScheduleCollection", "ScheduleCollection")
                        .WithMany()
                        .HasForeignKey("ScheduleCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppliedTemplate");

                    b.Navigation("ScheduleCollection");
                });

            modelBuilder.Entity("Scheduling.API.Models.Materialized.MonthlyScheduleItem", b =>
                {
                    b.HasOne("Scheduling.API.Models.Meal", "Meal")
                        .WithMany()
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Scheduling.API.Models.Materialized.MonthlyScheduleInstance", "MonthlyScheduleInstance")
                        .WithMany("Items")
                        .HasForeignKey("MonthlyScheduleInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");

                    b.Navigation("MonthlyScheduleInstance");
                });

            modelBuilder.Entity("Scheduling.API.Models.RecurringMealRule", b =>
                {
                    b.HasOne("Scheduling.API.Models.Meal", "Meal")
                        .WithMany()
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Scheduling.API.Models.ScheduleCollection", "ScheduleCollection")
                        .WithMany("Rules")
                        .HasForeignKey("ScheduleCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");

                    b.Navigation("ScheduleCollection");
                });

            modelBuilder.Entity("Scheduling.API.Models.ScheduleCollection", b =>
                {
                    b.HasOne("Scheduling.API.Models.ScheduleTemplate", "BaseTemplate")
                        .WithMany()
                        .HasForeignKey("BaseTemplateId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("BaseTemplate");
                });

            modelBuilder.Entity("Scheduling.API.Models.ScheduleOverride", b =>
                {
                    b.HasOne("Scheduling.API.Models.Meal", "ReplacementMeal")
                        .WithMany()
                        .HasForeignKey("ReplacementMealId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Scheduling.API.Models.ScheduleCollection", "ScheduleCollection")
                        .WithMany("Overrides")
                        .HasForeignKey("ScheduleCollectionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Scheduling.API.Models.RecurringMealRule", "TargetRule")
                        .WithMany()
                        .HasForeignKey("TargetRuleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ReplacementMeal");

                    b.Navigation("ScheduleCollection");

                    b.Navigation("TargetRule");
                });

            modelBuilder.Entity("Scheduling.API.Models.ScheduleTemplateDetail", b =>
                {
                    b.HasOne("Scheduling.API.Models.Meal", "Meal")
                        .WithMany("TemplateDetails")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Scheduling.API.Models.ScheduleTemplate", "ScheduleTemplate")
                        .WithMany("TemplateDetails")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");

                    b.Navigation("ScheduleTemplate");
                });

            modelBuilder.Entity("Scheduling.API.Models.Materialized.MonthlyScheduleInstance", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Scheduling.API.Models.Meal", b =>
                {
                    b.Navigation("TemplateDetails");
                });

            modelBuilder.Entity("Scheduling.API.Models.ScheduleCollection", b =>
                {
                    b.Navigation("AdHocMeals");

                    b.Navigation("Overrides");

                    b.Navigation("Rules");
                });

            modelBuilder.Entity("Scheduling.API.Models.ScheduleTemplate", b =>
                {
                    b.Navigation("TemplateDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
